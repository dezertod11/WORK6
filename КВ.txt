1) Перечислите все специальные функции-члены класса, включая перемещающие операции.
деструктор
конструкторы: по умолчанию, пользовательский, перемещения, копирования
присваивание перемещением
присваивание копированием

2) Приведите примеры операторов, которые можно, нельзя и не рекомендуется перегружать.
Можно << >> [] () ->
Не рекомендуется & ,
Нельзя :: . .*

3) О каких преобразованиях следует помнить при проектировании операторов?
Следует помнить о неявных преобразованиях - из-за них могут возникнуть ошибки при разрешении перегрузки операторов.

4) Опишите классификацию выражений на основе перемещаемости и идентифицируемости.
rvalue перемещаемое
gvalue идентифицируемое
xvalue идентифицируемое, перемещаемое
lvalue идентифицируемое, не перемещаемое
prvalue не идентифицируемое, перемещаемое

5) Зачем нужны rvalue-ссылки?
Нужны для реализации перемещения.

6) Почему семантика перемещения лучше копирования?
Потому что семантика перемещния позволяет избежать лишних затрат памяти при копировании больших объектов.

7) Что делает функия std::move и когда нет необходимости явно ее вызывать?
std::move() меняет тип аргумента с T на T&& - это позволяет использовать перемещение вместо копирования. 
Не нужно вызывать если возвращает большой объект, потому что в компилятор встроена RVO оптимизация.

8) Кем выполняется непосредственная работа по перемещению?
Выполняется конструктором перемещения и оператором присваивания перемещением.

9) Когда может потребоваться пользовательская реализация специальных функций-членов класса?
Пользовательская реализация специальных функций-членов класса может потребоваться, если при их выполнении необходимо выполнять какие еще либо действия или когда функции, созданные компилятором, не удовлетворяют требованиям.

10) Для чего нужны ключевые слова default и delete в объявлении специальных функций-членов класса?
default чтобы указать компилятору на необходимость создания данной функции-члена по умолчанию.
delete (наоборот)